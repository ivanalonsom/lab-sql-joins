--1. List the number of films per category.

SELECT c.name as 'category', count(f.film_id) 'film_count'
FROM film f
INNER JOIN film_category fc
ON f.film_id = fc.film_id
INNER JOIN category c
ON fc.category_id = c.category_id
GROUP BY category


--2. Retrieve the store ID, city, and country for each store.

SELECT s.store_id, c.city, co.country
FROM store s
INNER JOIN address a
ON s.address_id = a.address_id
INNER JOIN city c
ON a.city_id = c.city_id
INNER JOIN country co
ON c.country_id = co.country_id

--3. Calculate the total revenue generated by each store in dollars.

SELECT s.store_id AS 'store_id', sum(amount) AS 'total_revenue'
FROM store s
INNER JOIN staff 
ON s.store_id = staff.store_id
INNER JOIN payment p
ON staff.staff_id = p.staff_id
GROUP BY store_id

--4. Determine the average running time of films for each category.

SELECT c.name as 'category', avg(f.length) 'avg_time'
FROM film f
INNER JOIN film_category fc
ON f.film_id = fc.film_id
INNER JOIN category c
ON fc.category_id = c.category_id
GROUP BY category

-- BONUS
--5. Identify the film categories with the longest average running time.

SELECT c.name as 'category', avg(f.length) 'avg_time'
FROM film f
INNER JOIN film_category fc
ON f.film_id = fc.film_id
INNER JOIN category c
ON fc.category_id = c.category_id
GROUP BY category
ORDER BY avg_time DESC
LIMIT 1

--6. Display the top 10 most frequently rented movies in descending order.

SELECT inventory_id, count(inventory_id) AS 'rental_count'
FROM rental
GROUP BY inventory_id
ORDER BY rental_count DESC
LIMIT 10


--7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT CASE
	WHEN 'Academy Dinosaur' IN (
		SELECT title
        FROM film f
        INNER JOIN inventory i
        ON f.film_id = i.film_id
        INNER JOIN store s
        ON s.store_id = i.store_id
        WHERE s.store_id = 1) 
    THEN 'Yes'
	ELSE 'No'
END AS 'Can I?'

--8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT f.title, CASE
	WHEN i.film_id IS NULL THEN 'NOT avaliable'
    ELSE 'Avaliable'
END AS 'Status'
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id



















